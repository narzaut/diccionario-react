{"version":3,"sources":["hooks/useLocalStorage.js","context/GlobalState.js","helpers/idGenerator.js","components/SearchOutput.js","components/SearchView.js","components/FavoriteView.js","App.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","GlobalContext","createContext","GlobalStateProvider","props","api","setApi","favoriteList","setFavoriteList","Provider","favorite","children","idGenerator","S4","Math","random","toString","substring","SearchOutput","useContext","className","word","definition","StarOutlined","onClick","sortedList","id","SearchView","Search","Input","apiUrl","setWord","setDefinition","setError","query","setQuery","class","style","marginBottom","onChange","e","target","placeholder","onSearch","fetch","then","res","json","result","map","meanings","definitions","catch","enterButton","message","type","showIcon","to","ghost","FavoriteView","ArrowLeftOutlined","fontSize","obj","DeleteOutlined","filter","color","padding","textAlign","danger","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b6848c4.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n  \n    return [storedValue, setValue];\n  }","import React, {useState, createContext} from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage'\n\nexport const GlobalContext = createContext();\n\nexport const GlobalStateProvider = (props) => {\n    const [api, setApi] = useState('https://api.dictionaryapi.dev/api/v2/entries/es/')\n    const [favoriteList, setFavoriteList] = useLocalStorage('favoriteList', [])\n    \n    return(\n        <GlobalContext.Provider value = {{ api: [api, setApi], favorite: [favoriteList, setFavoriteList] }}>\n            {props.children}\n        </GlobalContext.Provider>\n    )   \n}\n","export const idGenerator = () => {\n  let S4 = function() {\n     return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n  };\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState'\nimport { StarOutlined } from '@ant-design/icons'\nimport { idGenerator } from '../helpers/idGenerator'\n\nexport function SearchOutput(props) {\n  const { favorite } = useContext(GlobalContext)\n  const [favoriteList, setFavoriteList] = favorite \n\n  const onClick = () => {\n    let sortedList = [...favoriteList, { word:props.word, definition: props.definition, id: idGenerator() }]\n    setFavoriteList(sortedList)\n  }\n\n  return (\n    <>\n      <div className='search-output-box'>\n        <p>Palabra: { props.word }</p>\n        <p>Definicion: { props.definition }</p>\n      </div>\n      { props.word != '' ? <StarOutlined onClick={ onClick } className='fav-btn btn-press'/> : null }\n    </>\n  );\n}\n\n","import React, { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { Input, Button, Alert} from 'antd';\nimport { useLocalStorage } from '../hooks/useLocalStorage'\nimport { GlobalContext } from '../context/GlobalState'\nimport { SearchOutput } from './SearchOutput'\n\nexport function SearchView() {\n  const { Search } = Input;\n  const { api } = useContext(GlobalContext)\n  const [apiUrl, setApiUrl] = api \n  \n  const [word, setWord] = useLocalStorage('currentWord', [])\n  const [definition, setDefinition] = useLocalStorage('currentDefinition', [])\n  const [error, setError] = useState(false)\n  const [query, setQuery] = useState('')\n  \n  const onSearch = (query) =>{\n    fetch(apiUrl+query)\n      .then(res => res.json())\n      .then(result => {\n        result.map(word => setWord(word.word))\n        result.map(word => setDefinition(word.meanings[0].definitions[0].definition))\n        setError(false)\n        setQuery('')\n      })\n      .catch(() =>{\n        setWord([])\n        setError(true)\n      })\n  }\n\n  return (\n    <div class='app-container'>\n      <div class='search-input-container'>\n        <label style={{ marginBottom: '1rem' }}>Busque una palabra</label>\n        <Search onChange={ e => setQuery(e.target.value) } value={ query } placeholder=\"Ingrese una palabra\" onSearch={ onSearch } enterButton />\n      </div>\n      <div class={word != '' ? 'search-output-container' : 'alert-error'}>\n        {word != '' ? <SearchOutput word={ word } definition={ definition }/> : ''}\n      </div>\n      { error === true ? <Alert style={{ marginBottom: '10%' }} message=\"La palabra que esta buscando no existe\" type=\"error\" showIcon/> : '' }\n      <Link to='/favorite'>\n        <Button type=\"dashed\" ghost>\n          Mostrar palabras favoritas\n        </Button>\n      </Link>     \n    </div>\n  );\n}\n\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { GlobalContext } from '../context/GlobalState'\nimport { DeleteOutlined, ArrowLeftOutlined } from '@ant-design/icons'\n\nexport function FavoriteView(props) {\n  const { favorite } = useContext(GlobalContext)\n  const [favoriteList, setFavoriteList] = favorite\n  \n  return (\n    <div className='container'>\n      <div className='favorite-title'>\n        <span>Lista de palabras favoritas</span>\n        <Link to='/'>\n          <ArrowLeftOutlined style={{ fontSize:'2rem' }}/>\n        </Link>\n      </div>\n      { favoriteList != '' ? favoriteList.map((obj) =>{\n        return(\n          <div className='search-output-container'>\n            <div className='search-output-box'>\n              <p>Palabra: {obj.word}</p>\n              <p>Definicion: {obj.definition}</p>\n            </div>\n            <DeleteOutlined className='delete-btn btn-press' onClick={ () => {\n              setFavoriteList(favoriteList.filter(word => word.id != obj.id))\n            }}/>\n          </div>\n        )\n      }) : <h2 style={ {color:'whitesmoke', padding: '2rem', textAlign:'center'} }>No existen palabras marcadas como favoritas.</h2> }\n      { favoriteList != '' ? <Button type=\"primary\" danger onClick={() => {\n        setFavoriteList(favoriteList.filter(word => word !== word))\n      }}>\n        Borrar todas\n      </Button> : ''\n      }\n    </div>\n  );\n}\n\n","/* Ejercicio Integrador\n\nEn los siguientes ejercicios, se evaluará las capacidades para desarrollar en React utilizando las siguientes características:\n\nElementos y Componentes (y las props)\nEstado y ciclo de vida del mismo\nRouter y navegación\n\nSe deberá realizar un ejercicio que contenga las siguientes características:\n\nSe debe realizar una aplicación cuyo funcionamiento sea buscar el significado de una palabra.\nAl encontrar el significado de la palabra es posible guardarlo como favoritos\nSe puede tener un listado de palabras favoritas y sus definiciones, así como también quitar palabras del listado de palabras favoritas.\nLas palabras en el listado de palabras favoritas deben estar ordenadas alfabéticamente, utilizando sort (https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\nDebe haber un botón para limpiar la lista de palabras favoritas.\nSe debe utilizar la API de LocalStorage (https://developer.mozilla.org/es/docs/Web/API/Window/localStorage) para persistir los datos en el navegador, de forma que al refrescar el navegador (F5) no se borren los datos.\nSe deben utilizar los componentes de Ant Design (https://ant.design/)\nSe debe utilizar la siguiente API rest (https://api.dictionaryapi.dev/api/v1/entries/es/PALABRA) sustituyendo PALABRA por la palabra a buscar.\n\n\n \nDetalles técnicos\n\nSe deben utilizar solo componentes de tipo función.\nDebe haber una ruta para el buscador de palabras, y otra ruta para el listado de palabras favoritas\nSe deben guardar las palabras favoritas en el estado, y al montarse el componente principal, se deben cargar las palabras guardadas del localStorage\nEn caso de que la definición de la palabra que se esté buscando no exista, la API devolverá un mensaje diciendo que la palabra no existe. En este caso, la aplicación debería reaccionar de forma adecuada, mostrando un alert (o cualquier otro método que provee Ant Design para mostrar errores) \nPara guardar los datos en el localStorage, el posible que se necesite usar JSON.parse y JSON.stringify\n*/\n\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {SearchView} from './components/SearchView'\nimport { FavoriteView } from './components/FavoriteView'\nfunction App() {\n  return (\n    <Router>\n      <div className = 'container'>\n        <Switch>\n          <Route path='/' exact component={ SearchView } />\n          <Route path='/favorite' exact component={ FavoriteView } />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport  App  from './App'\nimport { GlobalStateProvider } from './context/GlobalState'\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStateProvider>\n      <App />\n    </GlobalStateProvider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}